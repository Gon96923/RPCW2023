import xml.etree.cElementTree as et

tree=et.parse('biblia.xml')
root=tree.getroot()

l1 = """
@prefix : <http://rpcw.di.uminho.pt/2024/familia/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@base <http://rpcw.di.uminho.pt/2024/familia/> .

<http://rpcw.di.uminho.pt/2024/familia> rdf:type owl:Ontology .

#################################################################
#    Object Properties
#################################################################

###  http://rpcw.di.uminho.pt/2024/familia#temMae
:temMae rdf:type owl:ObjectProperty ;
        rdfs:domain :Pessoa ;
        rdfs:range :Pessoa .


###  http://rpcw.di.uminho.pt/2024/familia#temPai
:temPai rdf:type owl:ObjectProperty ;
        rdfs:domain :Pessoa ;
        rdfs:range :Pessoa .


#################################################################
#    Data properties
#################################################################

###  http://rpcw.di.uminho.pt/2024/familia#nome
:nome rdf:type owl:DatatypeProperty .


#################################################################
#    Classes
#################################################################

###  http://rpcw.di.uminho.pt/2024/familia#Pessoa
:Pessoa rdf:type owl:Class .


#################################################################
#    Individuals
#################################################################

"""

l2 = """

###  Generated by the OWL API (version 4.5.26.2023-07-17T20:34:13Z) https://github.com/owlcs/owlapi

"""

people = {}

with open("biblia.ttl", "w") as f:
    f.write(l1)

    for person in root.findall('.//person'):
        per = {}
        id = person.find('id').text
        name = person.find('namegiven').text
        per['id'] = id
        per['name'] = name
        per['father'] = None
        per['mother'] = None
        people[id] = per
    
    for fam in root.findall('.//family'):

        husband_id = None
        h = fam.find('husb')
        if h is not None:
            husband_id = h.get('ref')

        wife_id = None
        w = fam.find('wife')
        if w is not None:
            wife_id = w.get('ref')

        for c in fam.findall('chil'):
            if c is not None:
                child_id = c.get('ref')
                people[child_id]['father'] = husband_id
                people[child_id]['mother'] = wife_id
    
    for person in people.values():

        if person['father'] is not None and person['mother'] is not None:
            f.write(f"""

###  http://rpcw.di.uminho.pt/2024/familia#{person['id']}
:{person['id']} rdf:type owl:NamedIndividual ,
                :Pessoa ;
        :nome "{person['name']}" ;
        :temPai :{person['father']} ;
        :temMae :{person['mother']} .

""")
        elif person['father'] is not None:
            f.write(f"""

###  http://rpcw.di.uminho.pt/2024/familia#{person['id']}
:{person['id']} rdf:type owl:NamedIndividual ,
                :Pessoa ;
        :nome "{person['name']}" ;
        :temPai :{person['father']} .
""")
        elif person['mother'] is not None:
            f.write(f"""

###  http://rpcw.di.uminho.pt/2024/familia#{person['id']}
:{person['id']} rdf:type owl:NamedIndividual ,
                :Pessoa ;
        :nome "{person['name']}" ;
        :temMae :{person['mother']} .
""")

        else:
            f.write(f"""

###  http://rpcw.di.uminho.pt/2024/familia#{person['id']}
:{person['id']} rdf:type owl:NamedIndividual ,
                :Pessoa ;
        :nome "{person['name']}" .

""")



    

    f.write(l2)